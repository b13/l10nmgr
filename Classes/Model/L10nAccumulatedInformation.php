<?php

namespace Localizationteam\L10nmgr\Model;

/***************************************************************
 * Copyright notice
 * (c) 2006 Kasper Skårhøj <kasperYYYY@typo3.com>
 * All rights reserved
 * This script is part of the TYPO3 project. The TYPO3 project is
 * free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * The GNU General Public License can be found at
 * http://www.gnu.org/copyleft/gpl.html.
 * This script is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

use Localizationteam\L10nmgr\Model\Tools\Tools;
use TYPO3\CMS\Backend\Tree\View\PageTreeView;
use TYPO3\CMS\Backend\Utility\BackendUtility;
use TYPO3\CMS\Core\Authentication\BackendUserAuthentication;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Utility\GeneralUtility;

/**
 * l10nAccumulatedInformations
 * calculates accumulated informations for a l10n.
 *Needs a tree object and a l10ncfg to work.
 * This object is a value object (means it has no identity and can therefore be created and deleted “everywhere”).
 * However this object should be generated by the relevant factory method in the l10nconfiguration object.
 * This object represents the relevant records which belongs to a l10ncfg in the concrete pagetree!
 * The main method is the getInfoArrayForLanguage() which returns the $accum Array with the accumulated informations.
 *
 * @package TYPO3
 * @subpackage tx_l10nmgr
 */
class L10nAccumulatedInformation
{
    /**
     * @var string The status of this object, set to processed if internal variables are calculated.
     */
    protected $objectStatus = 'new';
    /**
     * @var PageTreeView
     */
    protected $tree;
    /**
     * @var array Selected l10nmgr configuration
     */
    protected $l10ncfg = [];
    /**
     * @var array List of not allowed doktypes
     */
    protected $disallowDoktypes = ['--div--', '255'];
    /**
     * @var int sys_language_uid of source language
     */
    protected $sysLang;
    /**
     * @var int sys_language_uid of target language
     */
    protected $forcedPreviewLanguage;
    /**
     * @var array Information about collected data for translation
     */
    protected $_accumulatedInformations = [];
    /**
     * @var int Field count, might be needed by tranlation agencies
     */
    protected $_fieldCount = 0;
    /**
     * @var int Word count, might be needed by tranlation agencies
     */
    protected $_wordCount = 0;
    /**
     * @var array Extension's configuration as from the EM
     */
    protected $extensionConfiguration = [];

    /**
     * Constructor
     *
     * @param $tree
     * @param $l10ncfg
     * @param $sysLang
     */
    public function __construct($tree, $l10ncfg, $sysLang)
    {
        // Load the extension's configuration
        $this->extensionConfiguration = empty($GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['l10nmgr'])
            ? unserialize($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['l10nmgr'])
            : $GLOBALS['TYPO3_CONF_VARS']['EXTENSIONS']['l10nmgr'];
        $this->disallowDoktypes = GeneralUtility::trimExplode(',', $this->extensionConfiguration['disallowDoktypes']);
        $this->tree = $tree;
        $this->l10ncfg = $l10ncfg;
        $this->sysLang = $sysLang;
    }

    /**
     * @param int $prevLangId
     */
    public function setForcedPreviewLanguage($prevLangId)
    {
        $this->forcedPreviewLanguage = $prevLangId;
    }

    /**
     * return information array with accumulated information.
     * This way client classes have access to the accumulated array directly.
     * And can read this array in order to create some output...
     *
     * @return array Complete Information array
     */
    public function getInfoArray()
    {
        $this->process();
        return $this->_accumulatedInformations;
    }

    /**
     * @return void
     */
    protected function process()
    {
        if ($this->objectStatus != 'processed') {
            $this->_calculateInternalAccumulatedInformationsArray();
        }
        $this->objectStatus = 'processed';
    }

    /** set internal _accumulatedInformations array.
     * Is called from constructor and uses the given tree, lang and l10ncfg
     *
     * @return void
     **/
    protected function _calculateInternalAccumulatedInformationsArray()
    {
        $tree = $this->tree;
        $l10ncfg = $this->l10ncfg;
        $accum = [];
        $sysLang = $this->sysLang;
        // FlexForm Diff data:
        $flexFormDiff = unserialize($l10ncfg['flexformdiff']);
        $flexFormDiff = $flexFormDiff[$sysLang];
        $excludeIndex = array_flip(GeneralUtility::trimExplode(',', $l10ncfg['exclude'], 1));
        // Init:
        /** @var Tools $t8Tools */
        $t8Tools = GeneralUtility::makeInstance(Tools::class);
        $t8Tools->verbose = false; // Otherwise it will show records which has fields but none editable.
        if ($l10ncfg['incfcewithdefaultlanguage'] == 1) {
            $t8Tools->includeFceWithDefaultLanguage = true;
        }
        // Set preview language (only first one in list is supported):
        if ($this->forcedPreviewLanguage != '') {
            $previewLanguage = $this->forcedPreviewLanguage;
        } else {
            $previewLanguage = current(
                GeneralUtility::intExplode(
                    ',',
                    $this->getBackendUser()->getTSConfig('options.additionalPreviewLanguages')['value'] ?? ''
                )
            );
        }
        if ($previewLanguage) {
            $t8Tools->previewLanguages = [$previewLanguage];
        }

        // Traverse tree elements:
        foreach ($tree->tree as $treeElement) {
            $pageId = $treeElement['row']['uid'];
            if (isset($excludeIndex['pages:' . $pageId]) || in_array($treeElement['row']['doktype'], $this->disallowDoktypes)) {
                continue;
            }

            $accum[$pageId]['header']['title'] = $treeElement['row']['title'];
            $accum[$pageId]['header']['icon'] = $treeElement['HTML'];
            $accum[$pageId]['header']['prevLang'] = $previewLanguage;
            $accum[$pageId]['items'] = [];
            // Traverse tables:
            foreach ($GLOBALS['TCA'] as $table => $cfg) {
                $fileList = '';
                // Only those tables we want to work on:
                if (!GeneralUtility::inList($l10ncfg['tablelist'], $table)) {
                    continue;
                }
                if ($table === 'pages') {
                    $accum[$pageId]['items'][$table][$pageId] = $t8Tools->translationDetails(
                        'pages',
                        BackendUtility::getRecordWSOL('pages', $pageId),
                        $sysLang,
                        $flexFormDiff,
                        $previewLanguage
                    );
                    $this->_increaseInternalCounters($accum[$pageId]['items'][$table][$pageId]['fields']);
                } else {
                    $allRows = $t8Tools->getRecordsToTranslateFromTable($table, $pageId);
                    if (!is_array($allRows)) {
                        continue;
                    }
                    if (empty($allRows)) {
                        continue;
                    }

                    // Now, for each record, look for localization:
                    foreach ($allRows as $row) {
                        BackendUtility::workspaceOL($table, $row);
                        if (!is_array($row)) {
                            continue;
                        }
                        if (isset($excludeIndex[$table . ':' . $row['uid']])) {
                            continue;
                        }
                        if ($table === 'sys_file_reference') {
                            $fileList .= $fileList ? ',' . (int)$row['uid_local'] : (int)$row['uid_local'];
                        }
                        $accum[$pageId]['items'][$table][$row['uid']] = $t8Tools->translationDetails(
                            $table,
                            $row,
                            $sysLang,
                            $flexFormDiff,
                            $previewLanguage
                        );
                        $this->_increaseInternalCounters($accum[$pageId]['items'][$table][$row['uid']]['fields']);
                    }
                }

                if ($table === 'sys_file_reference' && !empty($fileList)) {
                    $fileList = array_keys(array_flip(GeneralUtility::intExplode(',', $fileList, true)));
                    if (empty($fileList)) {
                        continue;
                    }
                    $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)->getQueryBuilderForTable('sys_file_metadata');
                    $metaData = $queryBuilder->select('uid')
                        ->from('sys_file_metadata')
                        ->where(
                            $queryBuilder->expr()->eq(
                                'sys_language_uid',
                                $queryBuilder->createNamedParameter((int)$previewLanguage, \PDO::PARAM_INT)
                            ),
                            $queryBuilder->expr()->in(
                                'file',
                                $fileList
                            )
                        )
                        ->orderBy('uid')
                        ->execute()
                        ->fetchAll();

                    if (empty($metaData)) {
                        continue;
                    }

                    $l10ncfg['include'] .= $l10ncfg['include'] ? ',' : '';
                    foreach ($metaData as $data) {
                        $l10ncfg['include'] .= 'sys_file_metadata:' . $data['uid'] . ',';
                    }
                    $l10ncfg['include'] = rtrim($l10ncfg['include'], ',');
                }
            }
        }

        $includeIndex = array_unique(GeneralUtility::trimExplode(',', $l10ncfg['include'], 1));
        foreach ($includeIndex as $recId) {
            list($table, $uid) = explode(':', $recId);
            $row = BackendUtility::getRecordWSOL($table, $uid);
            if (count($row)) {
                $accum[-1]['items'][$table][$row['uid']] = $t8Tools->translationDetails($table, $row, $sysLang, $flexFormDiff, $previewLanguage);
                $this->_increaseInternalCounters($accum[-1]['items'][$table][$row['uid']]['fields']);
            }
        }
        // debug($accum);
        $this->_accumulatedInformations = $accum;
    }

    /**
     * Returns the Backend User
     *
     * @return BackendUserAuthentication
     */
    protected function getBackendUser()
    {
        return $GLOBALS['BE_USER'];
    }

    /**
     * @param array $fieldsArray
     */
    protected function _increaseInternalCounters($fieldsArray)
    {
        if (is_array($fieldsArray)) {
            $this->_fieldCount = $this->_fieldCount + count($fieldsArray);
            if (function_exists('str_word_count')) {
                foreach ($fieldsArray as $v) {
                    $this->_wordCount = $this->_wordCount + str_word_count($v['defaultValue']);
                }
            }
        }
    }

    /**
     * @return int
     */
    public function getFieldCount()
    {
        return $this->_fieldCount;
    }

    /**
     * @return int
     */
    public function getWordCount()
    {
        return $this->_wordCount;
    }
}
